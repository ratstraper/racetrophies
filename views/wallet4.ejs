<html>
<head>
<!-- Работает, открывает окно и даже в мобиле. Но в мобиле не происходит соединение с кошельком.
 Нужно дальше разбираться. Возможны нюансы -->
 <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
<body>
    <w3m-button></w3m-button>
    <div id="info">web3modal + wagmi</div>
    <script type="module">
        import { createWeb3Modal, defaultWagmiConfig } from "https://esm.sh/@web3modal/wagmi@5.0.11/?bundle"
        //or
        //import { createWeb3Modal, defaultWagmiConfig } from "https://esm.sh/v135/@web3modal/wagmi@5.0.10/es2022/wagmi.bundle.mjs"
        import { mainnet, polygon } from "https://esm.sh/@wagmi/core@2.13.4/chains?exports=mainnet,polygon"
        import { reconnect, disconnect, getAccount, getEnsName, switchChain } from "https://esm.sh/@wagmi/core@2.13.4?exports=reconnect,disconnect,getAccount,getEnsName,switchChain"

        import { createConfig, http, cookieStorage, createStorage} from "https://esm.sh/@wagmi/core@2.13.4?exports=createConfig,http,cookieStorage,createStorage"
        import { injected, metaMask, safe, walletConnect } from 'https://esm.sh/@wagmi/connectors@5.1.5'

        //https://esm.sh/#docs
        //https://wagmi.sh/core/api/actions 
        //switchChain
        //const ensName = await getEnsName(config, { address })
        //await switchChain(config, { chainId: polygon.id })
        const projectId = "ed660915e4bae88bd2f75fa205e44bcd"; // wallet connect project ID here

        // 2. Create wagmiConfig
        const metadata = {
            name: "RT_Auth",
            description: "RT_Auth",
            url: "https://racetrophies.online", // origin must match your domain & subdomain
            icons: ["https://avatars.githubusercontent.com/u/37784886"],
        };

        const chains = [mainnet, polygon];

        export const config = defaultWagmiConfig({
            chains,
            projectId,
            metadata,
            // ssr: true,
            // storage: createStorage({
            //     storage: cookieStorage
            // }),
            // connectors: [connectorConnect],
            // ...wagmiOptions // Optional - Override createConfig parameters
        });
        // const config = createConfig({
        //     chains: [mainnet, polygon],
        //     ssr: true,
        //     connectors: [
        //         // injected(),
        //         walletConnect({ projectId }),
        //         // metaMask(),
        //         // safe(),
        //     ],
        //     // transports: {
        //     //     [mainnet.id]: http(),
        //     //     [polygon.id]: http(),
        //     // },
        // })

        reconnect(config);

        // 3. Create modal
        const modal = createWeb3Modal({
            wagmiConfig: config,
            projectId,
            // chains: chains,             // +
            // defaultChain: polygon       // +
        });

        // disconnect(config)
        /**
         * MODAL_LOADED
         * MODAL_OPEN
         * SELECT_WALLET
         * CONNECT_SUCCESS
         * CLICK_NETWORKS
         * SWITCH_NETWORK
         * CLICK_TRANSACTIONS
         * MODAL_CLOSE
         * CONNECT_ERROR
         */
        modal.subscribeEvents((newState) => {
            const name  = newState.data.event;
            if(name === "MODAL_CLOSE") {
                const account = getAccount(config)
                console.log(account)
            } else if(name === "CONNECT_SUCCESS") {
                const account = getAccount(config)
                console.log(account)                
            } else if(name === "MODAL_LOADED") {
                const account = getAccount(config)
                console.log(account)                   
            }
            console.log("events", newState.data.event);
        });

        // async function onConnect() {
        //     modal.open();
        // }

        // async function getWalletAddress() {
        //     const account = getAccount()    
        //     console.log(account)
        //     if (account.isConnected){
        //         return account.address
        //     }else {
        //         onConnect();
        //     }
        // }

        // async function getWalletBalance() {
        //     const address = await getWalletAddress()
        //     const balance = await fetchBalance({
        //         address:address,
        //     })
        //     console.log(balance)
        //     return balance
        // }
        // // onConnect()
        
      </script>
</body>
</html>